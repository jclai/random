/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cse460.project;

import java.text.DecimalFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author Justin
 */
public class MainGUI extends javax.swing.JFrame {

    /**
     * Creates new form MainGUI
     */
    private int currentTab;
    private int numGuests;
    private double billTotal;
    private double billDeductions;
    private double tax;
    private double tipTotal;
    private double tipRate;
    private double minTipPercent;
    private double maxTipPercent;
    private boolean includeTax;
    private boolean isTailored;
    private boolean includeDeductions;
    private Guest[] guestList;
    private DecimalFormat df;
    public MainGUI() {
        currentTab = 1;
        numGuests = 1;
        billTotal = 0;
        billDeductions = 0;
        tax = 0;
        tipRate = 20;
        tipTotal = 0;
        minTipPercent = 0;
        maxTipPercent = 40;
        includeTax = false;
        includeDeductions = true;
        isTailored = false;
        df = new DecimalFormat("0.00");
        guestList = new Guest[99];
        guestList[0] = new Guest();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        includeTaxGroup = new javax.swing.ButtonGroup();
        includeDeductionsGroup = new javax.swing.ButtonGroup();
        tabPanes = new javax.swing.JTabbedPane();
        tipConfigPanel = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        label5 = new java.awt.Label();
        label6 = new java.awt.Label();
        minTipPercentInput = new javax.swing.JTextField();
        maxTipPercentInput = new javax.swing.JTextField();
        label7 = new java.awt.Label();
        label8 = new java.awt.Label();
        includeTaxOnButton = new javax.swing.JRadioButton();
        includeTaxOffButton = new javax.swing.JRadioButton();
        includeDeductionsOnButton = new javax.swing.JRadioButton();
        includeDeductionsOffButton = new javax.swing.JRadioButton();
        mainPanel = new javax.swing.JPanel();
        numGuestsInput = new javax.swing.JTextField();
        label9 = new java.awt.Label();
        label10 = new java.awt.Label();
        qosSlider = new javax.swing.JSlider();
        billTotalInput = new javax.swing.JTextField();
        label11 = new java.awt.Label();
        label12 = new java.awt.Label();
        billDeductionsInput = new javax.swing.JTextField();
        label13 = new java.awt.Label();
        taxInput = new javax.swing.JTextField();
        label14 = new java.awt.Label();
        label15 = new java.awt.Label();
        label16 = new java.awt.Label();
        totalTipLabel = new java.awt.Label();
        label19 = new java.awt.Label();
        label20 = new java.awt.Label();
        label21 = new java.awt.Label();
        perPersonTipLabel = new java.awt.Label();
        label23 = new java.awt.Label();
        label24 = new java.awt.Label();
        label25 = new java.awt.Label();
        tipRateLabel = new java.awt.Label();
        perPersonTipResultLabel = new java.awt.Label();
        billAndTipTotalLabel = new java.awt.Label();
        label18 = new java.awt.Label();
        jLabel1 = new javax.swing.JLabel();
        tipTailoringPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabPanes.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabPanesStateChanged(evt);
            }
        });

        label1.setText("The tip range is the percentage range for selecting tips.");

        label2.setText("Default values are provided but you can adjust the range if you wish.");

        label3.setText("Minimum Tip Percentage");

        label4.setText("Maximum Tip Percentage");

        label5.setText("Include Deductions");

        label6.setText("The tip base consists of: the Bill Total, Tax, and Items Deducted from bill (discounts, refunds...)");

        minTipPercentInput.setText("0.00");
        minTipPercentInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minTipPercentInputActionPerformed(evt);
            }
        });
        minTipPercentInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                minTipPercentInputFocusLost(evt);
            }
        });

        maxTipPercentInput.setText("0.00");
        maxTipPercentInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxTipPercentInputActionPerformed(evt);
            }
        });
        maxTipPercentInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                maxTipPercentInputFocusLost(evt);
            }
        });

        label7.setText("The tip base is the items of the bill used to determine the tip amount.");

        label8.setText("Include Tax");

        includeTaxGroup.add(includeTaxOnButton);
        includeTaxOnButton.setText("On");
        includeTaxOnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeTaxOnButtonActionPerformed(evt);
            }
        });

        includeTaxGroup.add(includeTaxOffButton);
        includeTaxOffButton.setSelected(true);
        includeTaxOffButton.setText("Off");
        includeTaxOffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeTaxOffButtonActionPerformed(evt);
            }
        });

        includeDeductionsGroup.add(includeDeductionsOnButton);
        includeDeductionsOnButton.setSelected(true);
        includeDeductionsOnButton.setText("On");
        includeDeductionsOnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeDeductionsOnButtonActionPerformed(evt);
            }
        });

        includeDeductionsGroup.add(includeDeductionsOffButton);
        includeDeductionsOffButton.setText("Off");
        includeDeductionsOffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeDeductionsOffButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tipConfigPanelLayout = new javax.swing.GroupLayout(tipConfigPanel);
        tipConfigPanel.setLayout(tipConfigPanelLayout);
        tipConfigPanelLayout.setHorizontalGroup(
            tipConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tipConfigPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tipConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tipConfigPanelLayout.createSequentialGroup()
                        .addGroup(tipConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58)
                        .addGroup(tipConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(maxTipPercentInput)
                            .addComponent(minTipPercentInput, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)))
                    .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tipConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(tipConfigPanelLayout.createSequentialGroup()
                            .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(includeDeductionsOnButton)
                            .addGap(18, 18, 18)
                            .addComponent(includeDeductionsOffButton))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tipConfigPanelLayout.createSequentialGroup()
                            .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(64, 64, 64)
                            .addComponent(includeTaxOnButton)
                            .addGap(18, 18, 18)
                            .addComponent(includeTaxOffButton))))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        tipConfigPanelLayout.setVerticalGroup(
            tipConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tipConfigPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tipConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minTipPercentInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tipConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxTipPercentInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tipConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tipConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(includeTaxOnButton)
                        .addComponent(includeTaxOffButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tipConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tipConfigPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(includeDeductionsOnButton)
                        .addComponent(includeDeductionsOffButton)))
                .addContainerGap(222, Short.MAX_VALUE))
        );

        tabPanes.addTab("Configuring Tip Items", tipConfigPanel);

        numGuestsInput.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        numGuestsInput.setText("1");
        numGuestsInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numGuestsInputActionPerformed(evt);
            }
        });
        numGuestsInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                numGuestsInputFocusLost(evt);
            }
        });

        label9.setText("Quality of Service");

        label10.setText("Number of Guests");

        qosSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                qosSliderStateChanged(evt);
            }
        });
        qosSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                qosSliderFocusLost(evt);
            }
        });

        billTotalInput.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        billTotalInput.setText("0.00");
        billTotalInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billTotalInputActionPerformed(evt);
            }
        });
        billTotalInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                billTotalInputFocusLost(evt);
            }
        });

        label11.setText("Bill Total");

        label12.setText("Bill Deductions");

        billDeductionsInput.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        billDeductionsInput.setText("0.00");
        billDeductionsInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billDeductionsInputActionPerformed(evt);
            }
        });
        billDeductionsInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                billDeductionsInputFocusLost(evt);
            }
        });

        label13.setText("Tax");

        taxInput.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        taxInput.setText("0.00");
        taxInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taxInputActionPerformed(evt);
            }
        });
        taxInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                taxInputFocusLost(evt);
            }
        });

        label14.setText("$");

        label15.setText("$");

        label16.setText("$");

        totalTipLabel.setText("0.00");

        label19.setText("$");

        label20.setText("Total Tip");

        label21.setText("$");

        perPersonTipLabel.setText("Per Person Tip");

        label23.setText("Total (Bill and Tip)");

        label24.setText("$");

        label25.setText("%");

        tipRateLabel.setText("20.0");

        perPersonTipResultLabel.setText("0.00");

        billAndTipTotalLabel.setText("0.00");

        label18.setText("Tip Rate");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Tip Splitting Calculator");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(perPersonTipLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(qosSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(billTotalInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(billDeductionsInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(taxInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(totalTipLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tipRateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(perPersonTipResultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(billAndTipTotalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(numGuestsInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(484, 484, 484))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(252, 252, 252)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(37, 37, 37)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numGuestsInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qosSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(label11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(label13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(billTotalInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(billDeductionsInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(taxInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(label18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(perPersonTipLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(label25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(tipRateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(totalTipLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addComponent(perPersonTipResultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(billAndTipTotalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(label19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(105, Short.MAX_VALUE))
        );

        tabPanes.addTab("Bill Entry Screen", mainPanel);

        javax.swing.GroupLayout tipTailoringPanelLayout = new javax.swing.GroupLayout(tipTailoringPanel);
        tipTailoringPanel.setLayout(tipTailoringPanelLayout);
        tipTailoringPanelLayout.setHorizontalGroup(
            tipTailoringPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 657, Short.MAX_VALUE)
        );
        tipTailoringPanelLayout.setVerticalGroup(
            tipTailoringPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 465, Short.MAX_VALUE)
        );

        tabPanes.addTab("Tip Tailoring", tipTailoringPanel);

        tabPanes.setSelectedIndex(1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(tabPanes, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(tabPanes, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void includeTaxOnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeTaxOnButtonActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Tax is now included in tip base.");
        includeTax = true;
    }//GEN-LAST:event_includeTaxOnButtonActionPerformed

    private void includeDeductionsOnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeDeductionsOnButtonActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Deductions are now included in tip base.");
        includeDeductions = true;
    }//GEN-LAST:event_includeDeductionsOnButtonActionPerformed

    private void tabPanesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabPanesStateChanged
        //check what tab we are coming from
        //and then see what the new tab is as well
        int oldTab = currentTab;
        currentTab = tabPanes.getSelectedIndex();
        if(currentTab == 0)
        {
            updateConfigTab();
        }
        else if(currentTab == 1)
        {
            updateBillAndTipTotal();
        }
        else
        {
            updateGuestList();
        }
        System.out.println(oldTab + " " + currentTab);
    }//GEN-LAST:event_tabPanesStateChanged

    private void billTotalInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billTotalInputActionPerformed
        try
        {
            double tempTotal = Double.parseDouble(billTotalInput.getText());
            if(tempTotal < 0)
            {
                JOptionPane.showMessageDialog(rootPane, "Bill total must be non-negative.");
                billTotalInput.setText("0.00");
            }
            else
            {
                billTotal = tempTotal;
                updateBillAndTipTotal();
        
            }
        }
        catch(NumberFormatException e)
        {
           // System.out.println("input must be a number");
            JOptionPane.showMessageDialog(rootPane, "Bill total must be non-negative number.");
            billTotalInput.setText("0.00");
        }

    }//GEN-LAST:event_billTotalInputActionPerformed

    private void billTotalInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_billTotalInputFocusLost
        try
        {
            double tempTotal = Double.parseDouble(billTotalInput.getText());
            if(tempTotal < 0)
            {
                JOptionPane.showMessageDialog(rootPane, "Bill total must be non-negative.");
                billTotalInput.setText("0");
            }
            else
            {
                billTotal = tempTotal;
                updateBillAndTipTotal();
        
            }
        }
        catch(NumberFormatException e)
        {
           // System.out.println("input must be a number");
            JOptionPane.showMessageDialog(rootPane, "Bill total must be non-negative number.");
            billTotalInput.setText("0.00");
        }
    }//GEN-LAST:event_billTotalInputFocusLost

    private void numGuestsInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numGuestsInputFocusLost
        try
        {
            int tempGuests = Integer.parseInt(numGuestsInput.getText());

            if(tempGuests < 1 || tempGuests > 99)
            {
                JOptionPane.showMessageDialog(rootPane, "Number of guests must be an integer between 1 and 99 (inclusive)");
                numGuestsInput.setText("1");
            }
            else
            {
                numGuests = tempGuests;
                updateBillAndTipTotal();
                updateGuestList();
            }
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "Number of guests must be an integer between 1 and 99 (inclusive)");
            numGuestsInput.setText("1");
        }
    }//GEN-LAST:event_numGuestsInputFocusLost

    private void billDeductionsInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_billDeductionsInputFocusLost
        try
        {
            double tempDeductions = Double.parseDouble(billDeductionsInput.getText());
            if(tempDeductions < 0 )
            {
                JOptionPane.showMessageDialog(rootPane, "Bill deductions must be non-negative.");
                billDeductionsInput.setText("0.00");
            }
            else if(tempDeductions > billTotal)
            {
                JOptionPane.showMessageDialog(rootPane, "Bill deductions cannot exceed the bill total.");
                billDeductionsInput.setText("0.00");
            }
            else
            {
                billDeductions = tempDeductions;
                updateBillAndTipTotal();
            }
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "Bill deductions must be a non-negative number.");
            billDeductionsInput.setText("0.00");
        }
    }//GEN-LAST:event_billDeductionsInputFocusLost

    private void taxInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taxInputFocusLost
        try
        {
            double tempTax = Double.parseDouble(taxInput.getText());
            if(tempTax < 0 )
            {
                JOptionPane.showMessageDialog(rootPane, "Tax must be non-negative.");
                taxInput.setText("0.00");
            }
            else
            {
                if(tempTax > billTotal)
                {
                    JOptionPane.showMessageDialog(rootPane, "Warning: tax exceeds total bill value.");
                }
                tax = tempTax;
                updateBillAndTipTotal();
            }
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "Tax must be a non-negative number.");
            taxInput.setText("0.00");
        }
    }//GEN-LAST:event_taxInputFocusLost

    private void billDeductionsInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billDeductionsInputActionPerformed
        try
        {
            double tempDeductions = Double.parseDouble(billDeductionsInput.getText());
            if(tempDeductions < 0 )
            {
                JOptionPane.showMessageDialog(rootPane, "Bill deductions must be non-negative.");
                billDeductionsInput.setText("0.00");
            }
            else if(tempDeductions > billTotal)
            {
                JOptionPane.showMessageDialog(rootPane, "Bill deductions cannot exceed the bill total.");
                billDeductionsInput.setText("0.00");
            }
            else
            {
                billDeductions = tempDeductions;
                updateBillAndTipTotal();
            }
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "Bill deductions must be a non-negative value.");
            billDeductionsInput.setText("0.00");
        }
    }//GEN-LAST:event_billDeductionsInputActionPerformed

    private void taxInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_taxInputActionPerformed
        try
        {
            double tempTax = Double.parseDouble(taxInput.getText());
            if(tempTax < 0 )
            {
                JOptionPane.showMessageDialog(rootPane, "Tax must be non-negative.");
                taxInput.setText("0.00");
            }

            else
            {
                if(tempTax > billTotal)
                {
                    JOptionPane.showMessageDialog(rootPane, "Warning: tax exceeds total bill value.");
                }
                tax = tempTax;
                updateBillAndTipTotal();
            }
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "Tax must be a non-negative number.");
            taxInput.setText("0.00");
        }
    }//GEN-LAST:event_taxInputActionPerformed

    private void numGuestsInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numGuestsInputActionPerformed
        try
        {
            int tempGuests = Integer.parseInt(numGuestsInput.getText());

            if(tempGuests < 1 || tempGuests > 99)
            {
                JOptionPane.showMessageDialog(rootPane, "Number of guests must be an integer between 1 and 99 (inclusive)");
                numGuestsInput.setText("1");
            }
            else
            {
                numGuests = tempGuests;
                updateBillAndTipTotal();
                updateGuestList();
            }
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "Number of guests must be an integer between 1 and 99 (inclusive)");
            numGuestsInput.setText("1");
        }
    }//GEN-LAST:event_numGuestsInputActionPerformed

    private void qosSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_qosSliderFocusLost
        updateTipRate();
    }//GEN-LAST:event_qosSliderFocusLost

    private void includeTaxOffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeTaxOffButtonActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Tax is no longer included in tip base.");
        includeTax = false;
    }//GEN-LAST:event_includeTaxOffButtonActionPerformed

    private void includeDeductionsOffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeDeductionsOffButtonActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Deductions is no longer included in tip base.");
        includeDeductions = false;
    }//GEN-LAST:event_includeDeductionsOffButtonActionPerformed

    private void minTipPercentInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minTipPercentInputActionPerformed
        try
        {
            double tempPercent = Double.parseDouble(minTipPercentInput.getText());

            if(tempPercent < 0)
            {
                JOptionPane.showMessageDialog(rootPane, "Minimum tip percent must be a non-negative number.");
                resetTipPercent();
            }
            else
            {
                if(tempPercent > maxTipPercent)
                {
                    JOptionPane.showMessageDialog(rootPane, "Minimum tip percent cannot exceed maximum tip percent.");
                    resetTipPercent();
                }
                else
                {
                    minTipPercent = tempPercent;
                }
            }
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "Minimum tip percent must be a non-negative number.");
            resetTipPercent();
        }
    }//GEN-LAST:event_minTipPercentInputActionPerformed

    private void maxTipPercentInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxTipPercentInputActionPerformed
         try
        {
            double tempPercent = Double.parseDouble(maxTipPercentInput.getText());

            if(tempPercent < 0)
            {
                JOptionPane.showMessageDialog(rootPane, "Maximum tip percent must be a non-negative number.");
                resetTipPercent();
            }
            else
            {
                if(tempPercent < minTipPercent)
                {
                    JOptionPane.showMessageDialog(rootPane, "Maximum tip percent cannot be less than the minimum tip percent.");
                    resetTipPercent();
                }
                else
                {
                    maxTipPercent = tempPercent;
                }
            }
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "Maximum tip percent must be a non-negative number.");
            resetTipPercent();
        }
    }//GEN-LAST:event_maxTipPercentInputActionPerformed

    private void minTipPercentInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_minTipPercentInputFocusLost
        try
        {
            double tempPercent = Double.parseDouble(minTipPercentInput.getText());

            if(tempPercent < 0)
            {
                JOptionPane.showMessageDialog(rootPane, "Minimum tip percent must be a non-negative number.");
                resetTipPercent();
            }
            else
            {
                if(tempPercent > maxTipPercent)
                {
                    JOptionPane.showMessageDialog(rootPane, "Minimum tip percent cannot exceed maximum tip percent.");
                    resetTipPercent();
                }
                else
                {
                    minTipPercent = tempPercent;
                }
            }
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "Minimum tip percent must be a non-negative number.");
            resetTipPercent();
        }
    }//GEN-LAST:event_minTipPercentInputFocusLost

    private void maxTipPercentInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_maxTipPercentInputFocusLost
        try
        {
            double tempPercent = Double.parseDouble(maxTipPercentInput.getText());

            if(tempPercent < 0)
            {
                JOptionPane.showMessageDialog(rootPane, "Maximum tip percent must be a non-negative number.");
                resetTipPercent();
            }
            else
            {
                if(tempPercent < minTipPercent)
                {
                    JOptionPane.showMessageDialog(rootPane, "Maximum tip percent cannot be less than the minimum tip percent.");
                    resetTipPercent();
                }
                else
                {
                    maxTipPercent = tempPercent;
                }
            }
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(rootPane, "Maximum tip percent must be a non-negative number.");
            resetTipPercent();
        }
    }//GEN-LAST:event_maxTipPercentInputFocusLost

    private void qosSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_qosSliderStateChanged
        updateTipRate();
    }//GEN-LAST:event_qosSliderStateChanged
    
    private void updateGuestList()
    {
        if(guestList[numGuests-1] == null)
        {
            for(int i = 0; i < numGuests; i++)
            {
                if(guestList[i] == null)
                {
                    guestList[i] = new Guest();
                    javax.swing.JTextField text = new javax.swing.JTextField("test"); 
                    tipTailoringPanel.setLayout(new java.awt.BorderLayout());
                    text.setVisible(true);
                    tipTailoringPanel.add(text); 
                    tipTailoringPanel.revalidate(); 
                    tipTailoringPanel.repaint(); 
                }
            }
            //JOptionPane.showMessageDialog(rootPane, "need to update list!");
        }
        else
        {
            //JOptionPane.showMessageDialog(rootPane, "No need to update list!");
        }
    }
    private void resetTipPercent()
    {
        minTipPercentInput.setText("0.0");
        maxTipPercentInput.setText("40.0");
        minTipPercent = 0.0;
        maxTipPercent = 40.0;
        
    }
    private void updateTipRate(){
        double tipRange = maxTipPercent - minTipPercent;
        tipRate = (qosSlider.getValue() / 100.0) * tipRange + minTipPercent;
        tipRateLabel.setText(df.format(tipRate));
        updateBillAndTipTotal();
    }
    private void updateBillAndTipTotal(){
    double tempTotal = billTotal;
    tempTotal -= billDeductions;
    tempTotal += tax;
    double tipBase = tempTotal;
    
    if(!includeTax)
    {
        tipBase -= tax;
    }
    if(!includeDeductions)
    {
        tipBase += billDeductions;
    }
    
    tipTotal = (tipRate / 100.0) * tipBase;
    tempTotal += tipTotal;
    
    billAndTipTotalLabel.setText(df.format(tempTotal));
    totalTipLabel.setText(df.format(tipTotal));
    perPersonTipResultLabel.setText(df.format(tipTotal / numGuests));
    }
    
    private void updateConfigTab(){
    minTipPercentInput.setText(Double.toString(minTipPercent));
    maxTipPercentInput.setText(Double.toString(maxTipPercent));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label billAndTipTotalLabel;
    private javax.swing.JTextField billDeductionsInput;
    private javax.swing.JTextField billTotalInput;
    private javax.swing.ButtonGroup includeDeductionsGroup;
    private javax.swing.JRadioButton includeDeductionsOffButton;
    private javax.swing.JRadioButton includeDeductionsOnButton;
    private javax.swing.ButtonGroup includeTaxGroup;
    private javax.swing.JRadioButton includeTaxOffButton;
    private javax.swing.JRadioButton includeTaxOnButton;
    private javax.swing.JLabel jLabel1;
    private java.awt.Label label1;
    private java.awt.Label label10;
    private java.awt.Label label11;
    private java.awt.Label label12;
    private java.awt.Label label13;
    private java.awt.Label label14;
    private java.awt.Label label15;
    private java.awt.Label label16;
    private java.awt.Label label18;
    private java.awt.Label label19;
    private java.awt.Label label2;
    private java.awt.Label label20;
    private java.awt.Label label21;
    private java.awt.Label label23;
    private java.awt.Label label24;
    private java.awt.Label label25;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField maxTipPercentInput;
    private javax.swing.JTextField minTipPercentInput;
    private javax.swing.JTextField numGuestsInput;
    private java.awt.Label perPersonTipLabel;
    private java.awt.Label perPersonTipResultLabel;
    private javax.swing.JSlider qosSlider;
    private javax.swing.JTabbedPane tabPanes;
    private javax.swing.JTextField taxInput;
    private javax.swing.JPanel tipConfigPanel;
    private java.awt.Label tipRateLabel;
    private javax.swing.JPanel tipTailoringPanel;
    private java.awt.Label totalTipLabel;
    // End of variables declaration//GEN-END:variables
}
